(* Copyright (c) 2001-2015 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)
class Collections usingKernel: kernel = (
| private Array  = kernel Array. 
  private Pair   = kernel Pair.
  private Vector = kernel Vector.
|
)(
  public class Set = (
    | private items = Vector new. |
  ) (

    public = otherSet = (
      self size = otherSet size ifFalse: [^ false ].
      
      self do: [:item | (otherSet contains: item) ifFalse: [^ false]. ].
      
      ^ true.
    )

    public add: anObject = (
      (self contains: anObject)
        ifFalse: [ items append: anObject ]
    )
    
    public addAll: aCollection = (
      aCollection do: [:each |
        self add: each]
    )
    
    public union: aCollection = (
      | new |
      new := Set new.
      new addAll: self.
      new addAll: aCollection.
      ^ new
    )
    
    public intersection: aCollection = (
      | new |
      new := Set new.
      self do: [:it | 
          (aCollection contains: it) ifTrue: [ new add: it ]].
      ^ new
    )
    
    public - aCollection = ( (* set difference *)
      | new |
      new := Set new.
      self do: [:it |
          (aCollection contains: it) ifFalse: [ new add: it ]].
      ^ new
    )
    
    public contains: anObject = (
      items do: [ :it | it == anObject ifTrue: [ ^ true ] ].
      ^ false
    )
    
    public remove: anObject = (
      | newItems |
      newItems := Vector new.
      [ items isEmpty ]
        whileFalse: [ | it |
          it := items remove.
          it = anObject ifFalse: [ newItems append: it ] ].
      items := newItems
    )
    
    (* Sets do not have the notion of ordering, but
       for convenience we provide those accessors *)
    public first = (
      ^ items at: 1
    )
    
    public isEmpty = (
      ^ items isEmpty
    )
    
    (* Iteration *)
    public do: block = ( items do: block )
    
    'Collection'
    public collect: block = ( | coll |
      coll := Vector new.
      self do: [ :e | coll append: (block value: e) ].
      ^coll
    )
    
    'Printing'
    public println = (
      '(' print.
      self do: [ :it | '(' print. it print. ')' print ].
      ')' println
    )

    public asString = (
      | result |
      result := 'a Set('.
      items do: [:e | result := result + e asString + ', '].
      result := result + ')'.
      ^ result
    )
    
    public size = (
      ^ items size
    )

    public items: it = ( items := it )
  )

  public class Dictionary = (
  | private pairs = Set new. |
  )(
    public at: aKey put: aValue = (
      (self containsKey: aKey)
        ifTrue:  [ (self pairAt: aKey) value: aValue ]
        ifFalse: [ pairs add: (Pair withKey: aKey andValue: aValue) ]
    )

    public at: aKey = (
      pairs do: [ :p | p key = aKey ifTrue: [ ^p value ] ].
      ^ nil
    )

    public containsKey: aKey = (
      pairs do: [ :p | p key = aKey ifTrue: [ ^true ] ].
      ^ false
    )

    public keys   = ( ^ pairs collect: [ :p | p key ] )
    public values = ( ^ pairs collect: [ :p | p value ] )
    
    public size = ( ^ pairs size )
  
    'Iteration'
    public do: block = ( values do: block )
  
    private pairs: aSet = ( pairs := aSet )
    private pairAt: aKey = (
      pairs do: [ :p | p key = aKey ifTrue: [ ^p ] ].
      ^ nil
    )
  
    'Printing'
    public print = ( '{' print. pairs do: [ :p | p print ]. '}' print )
    public println = ( self print. '' println )    
  )
)