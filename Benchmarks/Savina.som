class Savina usingPlatform: platform andHarness: harness = (
| private Benchmark = harness Benchmark.
  private actors    = platform actors.
  private Array     = platform kernel Array.
|
)(
  (* A simple PRNG, to be as portable as possible. *)
  public class Random new: seed = (
    | private seed ::= seed. |
  ) (
    public next = (
      seed := ((seed * 1309) + 13849) & 65535.
      ^ seed
    )
  ) : (
    public new = (
      ^ new: 74755
    )
  )

  public class PingPong new: numPings = Benchmark (
  | private completionPP = actors createPromisePair.
    private NumPings     = numPings.
  |
  )(
    class Ping new: cnt with: pong = (
      | private pingsLeft ::= cnt.
        private pong = pong.
      |
    ) (
      public start = (
        pong <-: ping: self.
        pingsLeft := pingsLeft - 1.
      )
    
      public ping = (
        pong <-: ping: self.
        pingsLeft := pingsLeft - 1.
      )
    
      public pong: sender = (
        pingsLeft > 0
          ifTrue:  [ self <-: ping ]
          ifFalse: [ pong <-: stop ].
      )
    )
  
    class Pong = (
      | private pongCount ::= 0. |
    ) (
      public ping: sender = (
        sender <-: pong: self.
        pongCount := pongCount + 1.
      )
    
      public stop = (
        completionPP resolve: pongCount
      )
    )
    
    public benchmark = (
      | ping pong |
      pong := (actors createActorFromValue: Pong) <-: new.
      ping := (actors createActorFromValue: Ping) <-: new: NumPings with: pong.
      ping <-: start.
      ^ completionPP promise
    )
    
    public verifyResult: result = (
      ^ result = NumPings
    )
  ) : (
    public newInstance: problemSize = ( ^ self new: problemSize asInteger )
    public setupVerifiedRun: run = ( run problemSize: 1 )
  )
  
  public class ThreadRing new: numThreads = Benchmark (
  | private N = numThreads.
    private completionPP = actors createPromisePair.
  |
  )(
    class ThreadRingActor new: id numActorsInRing: num = (
    | private id = id.
      private numActorsInRing = num.
      private nextAct ::= nil.
    |
    )(
      public ping: t = (
        t > 0 ifTrue: [
          nextAct <-: ping: t - 1
        ] ifFalse: [
          nextAct <-: exit: numActorsInRing
        ]
      )
      
      public exit: t = (
        t > 0 ifTrue: [
          nextAct <-: exit: t - 1
        ] ifFalse: [
          completionPP resolve: id.
        ]
      )
      
      public nextActor: actor = (
        nextAct := actor
      )
    )
    
    public benchmark = (
      | threadActors |
      threadActors := Array new: N.
      1 to: N do: [:i |
        | threadActor |
        threadActor := (actors createActorFromValue: ThreadRingActor)
                         <-: new: i numActorsInRing: N.
        threadActors at: i put: threadActor.
      ].
      
      1 to: N do: [:i |
        | nextActor |
        nextActor := threadActors at: (i % N) + 1.
        (threadActors at: i) <-: nextActor: nextActor.
      ].
      
      (threadActors at: 1) <-: ping: N.
      ^ completionPP promise
    )
    
    public verifyResult: result = (
      ^ result = 2
    )
  ) : (
    public newInstance: problemSize = ( ^ self new: problemSize asInteger )
    public setupVerifiedRun: run = ( run problemSize: 1 )
  )
)
