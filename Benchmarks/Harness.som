(* Copyright (c) 2001-2015 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)
class Harness usingPlatform: platform = (
(*  The Harness can be invoked on the command line and should be passed a list
    of benchmarks to run (class names) as arguments. It will run each of them
    and output single as well as a total. *)
  | private system = platform system. |
)(

  class Benchmark = ()(
    public innerBenchmarkLoop: innerIterations = (
      | i |
      i := 0.
      [ i < innerIterations ] whileTrue: [
        (self verifyResult: self benchmark) ifFalse: [ ^ false ].
        i := i + 1.
      ].
      ^ true
    )

    benchmark  = ( self subclassResponsibility )
    verifyResult: result = ( self subclassResponsibility )

    assert: expected equals: value = (
      expected = value ifFalse: [
        self error: 'Expected value (' + expected asString + 
                    ') differs from actual (' + value asString + 
                    ') benchmark result.'
      ].
      ^ true
    )
  )

  class Run = (
    | public total           ::= 0.
      public numIterations   ::= 1.
      public warmUp          ::= 0.
      public innerIterations ::= 1.
      public maxRuntime      ::= nil.
      public printAll        ::= true.
      public numThreads      ::= 1.
      public benchmarkClass  ::= nil.  
    |
  )(
    
    public runBenchmark = (
      | result warmupBench |
      benchmarkClass oneTimeSetup.
      warmupBench := benchmarkClass new.

      ('Starting ' + warmupBench name + ' benchmark ... ') print.

      self doWarmup: warmupBench.

      numThreads = 1
        ifTrue:  [ result := self doRunsSequential ]
        ifFalse: [ result := self doRunsParallel   ].
          
      total := total + result.
      
      '' println
    )
    
    doRunsSequential = (
      | result bench |
      bench := benchmarkClass new.
      result := self doRuns: bench.
      self reportBenchmark: bench result: result. 
      ^ result
    )
    
    doRunsParallel = (
      | threads results |
      threads := Array new: numThreads.
      results := Array new: numThreads withAll: 0.
      
      1 to: numThreads do: [:i |
        | args |
        (* use arguments array to make sure there are no races *)
        args := Array with: i with: results. 
        
        threads at: i put: ([:anI :theResults |
          | result bench |
          bench := benchmarkClass new.
          result := self doRuns: bench.
          self reportBenchmark: bench result: result.
          theResults at: anI put: result.] spawn: args).
      ].
      
      1 to: numThreads do: [:i |
        (threads at: i) join
      ].
      
      ^ results sum
    )
    
    doWarmup: bench = (
      | numIterationsTmp printAllTmp maxRuntimeTmp |
      warmUp > 0 ifFalse: [
        '' println.
        ^ self].

      numIterationsTmp := numIterations.
      printAllTmp      := printAll.
      maxRuntimeTmp    := maxRuntime.

      numIterations := warmUp.
      printAll      := false.
      maxRuntime    := nil.

      ' warmup ...' print.
      self doRuns: bench.

      numIterations := numIterationsTmp.
      printAll      := printAllTmp.
      maxRuntime    := maxRuntimeTmp.

      ' completed.' println.
    )
    
    doRuns: bench = (
      | i total |
      i := 0.
      total := 0.
  
      [ i < numIterations ] whileTrue: [
        | startTime endTime runTime |
        startTime := system ticks.
        (bench innerBenchmarkLoop: innerIterations) ifFalse: [
          self error: 'Benchmark failed with incorrect result'. ].
        endTime   := system ticks.
    
        runTime := endTime - startTime.
        printAll ifTrue: [ self print: bench run: runTime ].
    
        total := total + runTime.
        i := i + 1.
    
        maxRuntime ifNotNil: [
          total > maxRuntime ifTrue: [
            numIterations := i.
            ^ total ]].
    
        system fullGC ].
  
      ^ total
    )
    
    reportBenchmark: bench result: result = (
      | out |
      out :=  bench name.
      out := out + ': iterations='.
      out := out + numIterations.
      out := out + ' average: '.
      out := out + (result / numIterations * numThreads).
      out := out + 'us'.
      out := out + ' total: '.
      out := out + result.
      out := out + 'us\n'.
      out println.
    )
     
    print: bench run: runTime = (
      (bench name + ': iterations=1' + ' runtime: ' + runTime + 'us') println
    )
        
    printTotal = (
      ('Total Runtime: ' + total asString + 'us') println.
    )
  )
    
  processArguments: args for: run = (
    (* First argument is the BenchmarkHarness *)
    run benchmarkClass: (self loadBenchmarkClass: (args at: 2)).
    args size > 2 ifTrue: [
      run numIterations: (args at: 3) asInteger.
      args size > 3 ifTrue: [
        (* converted to microseconds i.e. ticks *)
        run warmUp: (args at: 4) asInteger * 1000 * 1000.
        args size > 4 ifTrue: [
          run innerIterations: (args at: 5) asInteger.
          args size > 5 ifTrue: [
            run numThreads: (args at: 6) asInteger.
    ] ] ] ]
  )

  public main: args = (
    | run |
    args size < 2 ifTrue: [ self printUsage. ^ 1 ].
    
    run := Run new.
    self processArguments: args for: run.

    run runBenchmark.
    run printTotal.
    ^ 0
  )

  printUsage = (
    './som.sh core-lib/Benchmarks/Harness.som [benchmark] [num-iterations [warm-up [inner-iter [num-threads]]]' println.
    '' println.
    '  benchmark      - benchmark class name (e.g., Queens, Fibonacci, Dispatch)' println.
    '  num-iterations - number of times to execute benchmark, default: 1' println.
    '  warm-up        - number of times to execute benchmark before measuring, default: 0' println.
    '  inner-iter     - number of times the benchmark is executed in an inner loop, ' println.
    '                   which is measured in total, default: 1' println.
    '  num-threads    - number of threads executing, each doing num-iterations, default: 1' println.
  )

  loadBenchmarkClass: className = (
    | file cls |
    file := 'core-lib/Benchmarks/' + className + '.som'.
    cls := system loadModule: file.
    cls ifNil: [
        self error: 'Failed loading benchmark: ' + className ].
    ^ cls
  )
)
