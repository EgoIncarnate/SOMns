class Platform usingVmMirror: vmMirror = (
  (* The Platform class defines the runtime system of SOMns. It loads all
     elements required for execution, and afterwards processes the command line
     arguments to start the application code. *)
| public system  = (vmMirror load: 'System')  usingVmMirror: vmMirror.
  public mirrors = (vmMirror load: 'Mirrors') usingPlatform: self vmMirror: vmMirror.
  public kernel  = (vmMirror load: 'Kernel')  usingPlatform: self vmMirror: vmMirror. 
|

  (Application usingPlatform: self) start
)(
  protected class Application usingPlatform: platform = (
    | private platform = platform. |
  )(
    public start = (
      | arguments app errorCode |
      arguments := system arguments.

      arguments size < 1 ifTrue: [
        system error: 'No application specified for execution.'
      ].
      
      app := kernel load: (arguments at: 1).
      errorCode := (app usingPlatform: platform) main: platform args: arguments.
      system exit: errorCode
    )
  )
  
  private class Universe usingPlatform: platform = Value (
    (* The universe object is a singleton provided by the runtime.
       It is the outer scope in case there is no other outer scope.
       In Newspeak, the nil object is this outer scope. However, this
       leads to strange consequences, for instance, the polution of Object
       with messages to obtain various classes. *)
    | private Object = platform kernel Object.
    | private Value  = platform kernel Value. |
  )() : (
    public new = ( system error: 'Cannot instantiate Universe'. )
  )
)
