# Config file for ReBench
# Config format is YAML (see http://yaml.org/ for detailed spec)

# this run definition will be choosen if no parameters are given to rebench.py
standard_run: all
standard_data_file: 'codespeed.data'
standard_experiment: SOMns

reporting:
    # results can also be reported to a codespeed instance
    # see: https://github.com/tobami/codespeed
    csv_file: latest-runs.csv
    csv_locale: de_DE.UTF-8
    codespeed:
        url: http://som-speed.stefan-marr.de/result/add/json/

runs:
    number_of_data_points: 3

statistics:
    confidence_level: 0.95
 
# settings for quick runs, useful for fast feedback during experiments
quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    macro-startup:
        gauge_adapter: RebenchLog
        command: &MACRO_CMD " core-lib/Benchmarks/Harness.som %(benchmark)s "
        max_runtime: 600
        benchmarks:
            - Richards:
                extra_args: "1 0 1"
                codespeed_name: "Richards [>"
            - DeltaBlue:
                extra_args: "1 0 1000"
                codespeed_name: "DeltaBlue [>"
            - Mandelbrot:
                extra_args: "1 0 300"
                codespeed_name: "Mandelbrot [>"
            - NBody:
                extra_args: "1 0 30000"
                codespeed_name: "NBody [>"
            - Json:
                extra_args: "1 0 80"
                codespeed_name: "Json [>"
            - GraphSearch:
                extra_args: "1 0 30"
                codespeed_name: "GraphSearch [>"
            - PageRank:
                extra_args: "1 0 1400"
                codespeed_name: "PageRank [>"

    macro-steady:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_runtime: 6000
        benchmarks:
            - Richards:
                extra_args: "130 0 60"
                codespeed_name: "Richards >]"
                warmup: 30
            - DeltaBlue:
                extra_args: "120 0 20000"
                codespeed_name: "DeltaBlue >]"
                warmup: 20
            - Mandelbrot:
                extra_args: "110 0 1000"
                codespeed_name: "Mandelbrot >]"
                warmup: 10
            - NBody:
                extra_args: "120 0 500000"
                codespeed_name: "NBody >]"
                warmup: 20
            - Json:
                extra_args: "120 0 80"
                codespeed_name: "Json >]"
                warmup: 20
            - GraphSearch:
                extra_args: "250 0 30"
                codespeed_name: "GraphSearch >]"
                warmup: 100
            - PageRank:
                extra_args: "120 0 1400"
                codespeed_name: "PageRank >]"
                warmup: 20

    som-startup:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_runtime: 600
        benchmarks:
            - Fannkuch:
                extra_args: "1 0 9"
                codespeed_name: "Fannkuch >]"
            - List:
                extra_args: "1 0 50"
                codespeed_name: "List [>"
            - Bounce:
                extra_args: "1 0 100"
                codespeed_name: "Bounce [>"
            - Permute:
                extra_args: "1 0 50"
                codespeed_name: "Permute [>"
            - Queens:
                extra_args: "1 0 50"
                codespeed_name: "Queens [>"
            - Storage:
                extra_args: "1 0 20"
                codespeed_name: "Storage [>"
            - Sieve:
                extra_args: "1 0 100"
                codespeed_name: "Sieve [>"
            - Towers:
                extra_args: "1 0 20"
                codespeed_name: "Towers [>"

    som-steady:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_runtime: 600
        benchmarks:
            - Fannkuch:
                extra_args: "55 0 9"
                codespeed_name: "Fannkuch >]"
                warmup: 5
            - List:
                extra_args: "70 0 1000"
                codespeed_name: "List >]"
                warmup: 20
            - Bounce:
                extra_args: "60 0 4000"
                codespeed_name: "Bounce >]"
                warmup: 10
            - Permute:
                extra_args: "60 0 1500"
                codespeed_name: "Permute >]"
                warmup: 10
            - Queens:
                extra_args: "120 0 1000"
                codespeed_name: "Queens >]"
                warmup: 70
            - Storage:
                extra_args: "75 0 1000"
                codespeed_name: "Storage >]"
                warmup: 25
            - Sieve:
                extra_args: "60 0 2500"
                codespeed_name: "Sieve >]"
                warmup: 10
            - Towers:
                extra_args: "60 0 1000"
                codespeed_name: "Towers >]"
                warmup: 10

    sort-startup:
        gauge_adapter: RebenchLog
        command: &SORT_CMD " core-lib/Benchmarks/Harness.som Sort.%(benchmark)s "
        max_runtime: 600
        benchmarks:
            - TreeSort:
                extra_args: "1 0 10"
                codespeed_name: "TreeSort [>"
            - BubbleSort:
                extra_args: "1 0 100"
                codespeed_name: "BubbleSort [>"
            - QuickSort:
                extra_args: "1 0 20"
                codespeed_name: "QuickSort [>"

    sort-steady:
        gauge_adapter: RebenchLog
        command: *SORT_CMD
        max_runtime: 600
        benchmarks:
            - BubbleSort:
                extra_args: "60 0 3000"
                codespeed_name: "BubbleSort >]"
                warmup: 10
            - QuickSort:
                extra_args: "60 0 2000"
                codespeed_name: "QuickSort >]"
                warmup: 10
            - TreeSort:
                extra_args: "60 0 1000"
                codespeed_name: "TreeSort >]"
                warmup: 10

    micro-startup:
        gauge_adapter: RebenchLog
        command: &MICRO_CMD " core-lib/Benchmarks/Harness.som LanguageFeatures.%(benchmark)s "
        max_runtime: 30
        benchmarks:
            - Fibonacci:
                extra_args: "1 0 100"
                codespeed_name: "Fibonacci [>"
            - Dispatch:
                extra_args: "1 0 1000"
                codespeed_name: "Dispatch [>"
            - Loop:
                extra_args: "1 0 500"
                codespeed_name: "Loop [>"
            - Recurse:
                extra_args: "1 0 100"
                codespeed_name: "Recurse [>"
            - Sum:
                extra_args: "1 0 500"
                codespeed_name: "Sum [>"
            - IntegerLoop:
                extra_args: "1 0 400"
                codespeed_name: "IntegerLoop [>"
            - FieldLoop:
                extra_args: "1 0 50"
                codespeed_name: "FieldLoop [>"
            - WhileLoop:
                extra_args: "1 0 1000"
                codespeed_name: "WhileLoop [>"

    micro-steady:
        gauge_adapter: RebenchLog
        command: *MICRO_CMD
        max_runtime: 600
        benchmarks:
            - Fibonacci:
                extra_args: "70 0 1000"
                codespeed_name: "Fibonacci >]"
                warmup: 20
            - Dispatch:
                extra_args: "55 0 10000"
                codespeed_name: "Dispatch >]"
                warmup: 5
            - Loop:
                extra_args: "55 0 10000"
                codespeed_name: "Loop >]"
                warmup: 5
            - Recurse:
                extra_args: "70 0 2000"
                codespeed_name: "Recurse >]"
                warmup: 20
            - Sum:
                extra_args: "55 0 10000"
                codespeed_name: "Sum >]"
                warmup: 5
            - IntegerLoop:
                extra_args: "55 0 8000"
                codespeed_name: "IntegerLoop >]"
                warmup: 5
            - FieldLoop:
                extra_args: "55 0 900"
                codespeed_name: "FieldLoop >]"
                warmup: 5
            - WhileLoop:
                extra_args: "55 0 9000"
                codespeed_name: "WhileLoop >]"
                warmup: 5


# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    SOMns-interp:
        path: .
        binary: som.sh
    SOMns-graal:
        path: . 
        binary: graal.sh
        
# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    SOMns:
        description: All benchmarks on SOMns with Graal
        actions: benchmark
        benchmark:
            - micro-startup
            - micro-steady
            - macro-startup
            - macro-steady
            - sort-startup
            - sort-steady
            - som-startup
            - som-steady
        executions:
            #- SOMns-interp  # let's not run those, it takes too long
            - SOMns-graal
