class PingPongApp usingPlatform: platform = Value (
| private actors = platform actors.
  private system = platform system.
|)(
  public class PingPong new: numPings = Value (
  | private NumPings = numPings.
  |
  )(
    class Ping new: cnt with: pong = (
      | private pingsLeft ::= cnt.
        private pong = pong.
      |
    ) (
      public start = (
        'Ping>>start' println.
        pong <-: ping: self.
        pingsLeft := pingsLeft - 1.       
      )
    
      public ping = ( 
      | p1 |
        'Ping>>ping' println.
        pong <-: ping: self.
        pingsLeft := pingsLeft - 1.

        p1 := self <-: validate: pingsLeft.        
        p1 whenResolved: [:v | v println. ].
      )

      public validate: pings = (
        ^ self <-: validMessage: pings.
      )

      public validMessage: pings = (
      | p2 r |
        p2 := actors createPromisePair.
        r := p2 resolver.
        r resolve: ' ping value ' + pings.
        
        ^ p2 promise
      )
    
      public pong: sender = (
        'Ping>>pong' println.
        pingsLeft > 0
          ifTrue:  [ self <-: ping ]
          ifFalse: [ pong <-: stop ].
      )
    )
  
    class Pong new: completionRes = (
    | private pongCount ::= 0.
      private completionRes = completionRes.
    |
    ) (
      public ping: sender = (
        'Pong>>ping' println.
        sender <-: pong: self.
        pongCount := pongCount + 1.
      )
    
      public stop = (
        'Pong>>stop' println.
        completionRes resolve: pongCount
      )
    )
    
    public benchmark = (
      | ping pong completionPP p |
      completionPP := actors createPromisePair.
      pong := (actors createActorFromValue: Pong) <-: new: completionPP resolver.
      ping := (actors createActorFromValue: Ping) <-: new: NumPings with: pong.
      p := ping <-: start.
      p <-: println.
      ^ completionPP promise whenResolved: [:r |
         ('Done with: ' + r asString) println. ]
    )
  ) : (
    public newInstance: problemSize = ( ^ self new: problemSize asInteger )
    public setupVerifiedRun: run = ( run problemSize: 1 )
  )

  private testHalt = (
    1 halt.
    ^ 0
  )

  private testDNU = (
    1 foobar.
    ^ 0
  )

  private testPrintStackTrace = (
    system printStackTrace.
    ^ 0
  )

  public main: args = (
    args size = 1 ifTrue: [
      ^ (PingPong new: 3) benchmark ].
    args size = 2 ifTrue: [
      | test |
      test := args at: 2. 
      test = 'halt'  ifTrue: [ ^ testHalt ].
      test = 'dnu'   ifTrue: [ ^ testDNU  ].
      test = 'stack' ifTrue: [ ^ testPrintStackTrace  ].
    ].
    ^ 0
  )
)
