class TestRunner usingPlatform: platform = (
| private platform = platform.
  private system   = platform system.
  private minitest = (system loadModule: 'core-lib/TestSuite/Minitest.som') usingPlatform: platform.
|
)(

  printNameAndDescription: failureOrError = (
    failureOrError testCase environment classDeclarationMirror name asString print.
      '>>#' print. failureOrError testCase selector println.
    '\t' print. failureOrError description println.
  )
  
  reportErrors: errors = (
    errors size > 0 ifTrue: [
      'Errors' println.
      '------\n' println.
  
      errors do: [:terr |
        printNameAndDescription: terr.
      ].

      '' println.
    ].
  )
  
  reportFailures: failures = (
    failures size > 0 ifTrue: [
      'Failures' println.
      '--------\n' println.
  
      failures do: [:failure |
        printNameAndDescription: failure
      ].

      '' println.
    ].
  )
  
  runAllTests: testModule = (
    | tester catalog |
    catalog := minitest TestCatalog forModule: testModule.
    tester := minitest Tester testSuite: catalog allTests.
    tester runAll.
  
    (* reporting *)
    reportErrors:   tester errors.
    reportFailures: tester failures.

    'Total Number of Tests:      ' print.
    (tester errors size + tester failures size + tester successes size) println.
    'Number of Successful Tests: ' print.
    tester successes size println.

    ^ tester errors size + tester failures size = 0
  )
  
  runAllKnownModules = (
    | modules result |
    modules := 'LanguageTests',
               'CollectionTests',
               'DoubleTests',
               'IntegerTests',
               'StringTests',
               'SymbolTests',
               'SystemTests',
               'BenchmarkHarnessTests',
               'MinitestTests'.
               
               (* 'ReflectionTests', *)
    
    result := true.
    modules do: [:m |
      | testModule |
      testModule := (system loadModule: 'core-lib/TestSuite/' + m + '.som') usingPlatform: platform testFramework: minitest.
      m println.
      result := result and: [runAllTests: testModule].
      '' println.
    ].
    ^ result
  )

  public main: args = (
    |  testModule |
    
    args size = 2 ifTrue: [
      testModule := (system loadModule: (args at: 2)) usingPlatform: platform testFramework: minitest.
      (runAllTests: testModule)
        ifTrue: [^0] ifFalse: [^1]
    ].
    
    args size = 1 ifTrue: [
      runAllKnownModules
        ifTrue: [^0] ifFalse: [^1]
    ].

    'TODO: add help text' println.
    ^ 1
  )
)
