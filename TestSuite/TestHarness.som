(* Copyright (c) 2001-2015 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)
class Harness usingPlatform: platform = (
| private Vector = platform collections Vector. |
  private ignoreInefficacies
|
) (
  class TestCase for: aSelector = (
    | selector = aSelector.
      runner failed
    |
  ) (
    'asserting'
    assert: aBoolean = (
      aBoolean ifFalse: [
        self signalFailure: 'Assertion failed' ] )

    assert: aBoolean description: aStringOrBlock = (
      aBoolean ifFalse: [
        self signalFailure: aStringOrBlock value ] )
    
    assert: expected equals: actual = (
      (* test value equality *)
      self assert: (expected = actual)
        description: [self comparingStringBetween: expected and: actual]
    )
    
    assert: expected is: actual = (
      (* test reference equality *)
      self assert: (expected == actual)
        description: [self comparingStringBetween: expected and: actual]
    )
    
    expect: aBoolean = (
      aBoolean ifFalse: [
        self signalInefficacy: 'Expectation unsatisfied' ] )
    
    expect: expected equals: actual = (
      self expect: (expected = actual) 
        description: [self comparingStringBetween: expected and: actual]
    )
    
    expect: expected is: actual = (
      self expect: (expected == actual) 
        description: [self comparingStringBetween: expected and: actual]
    )
    
    expect: aBoolean description: aStringOrBlock = (
      aBoolean ifFalse: [
        self signalInefficacy: aStringOrBlock value ] )
    
    deny: aBoolean = (
      self assert: aBoolean not
    )
    
    deny: aBooleanOrBlock description: aString = (
      self assert: aBooleanOrBlock value not description: aString
    )
    
    signalFailure: aString = (
      failed := true.
      runner fail: self class name + '>>#' + testSelector
          because: aString.
    )
    
    signalInefficacy: aString = (
      runner unsatisfied: self class name + '>>#' + testSelector
                 because: aString.
    )
    
    comparingStringBetween: expected and: actual = (
      ^ 'Expected ' + expected asString +
        ' but was ' + actual asString + '.'
    )
    
    'running'
    run: aRunner = (
      runner := aRunner.
      failed := false.
      
      self setUp.
      self performTest.
      self tearDown.
      
      failed ifFalse: [
        runner passed: self class name + '>>#' + testSelector
      ].
    )
    
    setUp    = ()
    tearDown = ()
    
    performTest = ( self perform: testSelector )
  )

  class Runner for: aSuite = (
  | private suite        = aSuite.
    private passes       = Vector new.
    private inefficacies = Vector new.
    private failures     = Vector new.
  |
  )(
    hasInefficacies = ( ^ inefficacies size > 0 )
    hasFailures     = ( ^ failures size > 0 )
  
    expectedPasses = ( ^ suite tests size )
    actualPasses   = ( ^ passes size )

    run = (
      self reportPreRun.
      self runAllTests.
      self reportPostRun.
      self overviewReport.
    )
  
    reportPreRun = (
      ('TestSuite ' + suite name + ':') println.
      ('Tests: ' + suite tests size asString) println.
    )
  
    reportPostRun = (
      self hasInefficacies ifTrue: [
        ('Inefficacies: ' + inefficacies size asString) println
      ].
      self hasFailures ifTrue: [
        ('Failures: ' + failures size asString) println
      ].
    )

    tests = (
      | tests |
      tests := Vector new: self methods length.
      self methods do: [:m |
          (m signature beginsWith: #test) ifTrue: [
              tests append: (self for: m signature).
          ].
      ].
      
      ^ tests
    )

    runAllTests = (
      tests do: [ :each |
          each run: self ].
    )

    overviewReport = (
      ('Tests passed: ' + passes size asString) println.

      (self hasFailures or: [self hasInefficacies]) ifTrue: [
        '------------------------------' println ].
    
      self hasInefficacies ifTrue: [
        ('Inefficacies: ' + inefficacies size asString) println.
        inefficacies do: [:each |
          ('    ' + each key asString) println.
          ('        ' + each value asString) println ].
      ].

      self hasFailures ifTrue: [
        ('Failures: ' + failures size asString) println.
        failures do: [:each |
          ('    ' + each key asString) println.
          ('        ' + each value asString) println ].
      ].
    )

    fail: aSignature because: aReason = (
      | pair |
      pair := Pair withKey: aSignature andValue: aReason.
      failures append: pair.
    )
  
    unsatisfied: aSignature because: aReason = (
      | pair |
      pair := Pair withKey: aSignature andValue: aReason.
      inefficacies append: pair.
    )
  
    passed: aSignature = (
      passes append: aSignature
    )
  )

  tests = (
    (* TODO: eventually replace by a mechanism that finds file *)
    (* ordered alphabetically to improve maintainability *)
    ^ 'Array',
      'Block',
      'ClassStructure',
      'CompilerReturn',
      'DoesNotUnderstand',
      'Double',
      'Integer',
      'Reflection',
      'SelfBlock',
      'Set',
      'String',
      'Super',
      'Symbol', 
      'System',
      'Vector'
  )

  runAllSuites = (
    |  totalTestNum successfulTestNum |
    totalTestNum := 0.
    successfulTestNum := 0.

    self tests do: [ :test |
      | runner |
      runner := Runner for: (self loadSuite: test).
      runner runAllTests.
      ((runner hasInefficacies and: [ignoreInefficacies not]) or: [
        runner hasFailures]) ifTrue: [
        'Test Suite: ' print.
        test println.
        runner overviewReport.
        '' println.
      ].
  
      totalTestNum      := totalTestNum + runner expectedPasses.
      successfulTestNum := successfulTestNum + runner actualPasses.
    ].

    'Total Number of Tests:      ' print.
    totalTestNum println.
    'Number of Successful Tests: ' print.
    successfulTestNum println.
    totalTestNum = successfulTestNum ifFalse: [ system exit: 1].
  )

  runOneSuite: name = (
    | testName runner |
    testName := name.
    (testName endsWith: 'Test') ifFalse: [
      testName := testName + 'Test'].

    runner := TestRunner new.
    runner initializeOn: (system resolve: testName asSymbol).
    runner run.
    runner hasFailures ifTrue: [system exit: 1]
  )
  
  public main: args = (
    ignoreInefficacies := false.

    args length = 1 ifTrue:  [ self runAllSuites. ].
    args length = 2 ifTrue:  [
      ((args at: 2) beginsWith: '--') ifTrue: [
        (args at: 2) = '--help' ifTrue: [
          'TestHarness.som [--help] [--ignore-inefficacies] [TestSuiteName]' println.
          system exit: 0.
        ].
        (args at: 2) = '--ignore-inefficacies' ifTrue: [
          ignoreInefficacies := true.].
        self runAllSuites
      ] ifFalse: [
        self runOneSuite: (args at: 2) ]].
  )
)
