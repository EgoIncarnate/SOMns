ThreadTest = TestCase (

    testDelayInterface = (
        | d |
        d := Delay forSeconds: 1.
        self assert: 1000 equals: d duration.
        
        d := Delay forMilliseconds: 1.
        self assert: 1    equals: d duration.
        
        "This could change, perhaps to indicate interruption."
        self expect: d is: d wait.
    )
    
    testMutexInterface = (
        | m r cond1 cond2 |
        m := Mutex new.
        r := m critical: [ #value ].
        self assert: #value equals: r.
        
        self assert: false equals: m isLocked.
        self assert: m     is:     m lock.
        self assert: true  equals: m isLocked.
        self assert: m     is:     m unlock.
        self assert: false equals: m isLocked.
        
        cond1 := m newCondition.
        cond2 := m newCondition.
        self deny: cond1 == cond2.
    )
    
    testBlockInterface = (
        | thread |
        thread := [] spawn.
        
        self assert: Thread is: thread class.
        
        thread := [:i | i ] spawn: (Array with: 1).

        self assert: Thread is: thread class.
        
        thread := [] spawnNamed: 'foo'.
        self assert: 'foo' equals: thread name.
    )
    
    testThreadInterface = (
        | thread thread2 |
        thread := [] spawn.
        thread name: 'bar'.
        self assert: 'bar'  equals: thread name.
        "TruffleSOM doesn't allow to unset the name to nil, but it isn't really essential"
        
        self assert: thread is: thread join.
        self assert: Thread is: Thread yield.
        
        thread  := Thread current.
        thread2 := Thread current.
        self assert: thread is: thread2.
    )
    
    testThreadCurrent = (
      | thread subThreadCurrent |
      "on the main thread, #current may return nil"
      self expect: nil is: Thread current.
      
      thread := [subThreadCurrent := Thread current] spawn.
      thread join.
      
      "those two should be the same object"
      self assert: thread is: subThreadCurrent.
    )
    
    testConditionInterface = (
        | m c |
        m := Mutex new.
        c := m newCondition.
        m lock.
        c signalOne.
        
        self deny: (c await: 1) description: 'Await times out'.
        "Can't test #await with a single thread, should be done in a proper test"
    )
)
