class BlockTests usingPlatform: platform testFramework: minitest = (
  | private TestContext = minitest TestContext.
    private Array       = platform kernel Array.
  |
)(
  (* This test verifies that SOM blocks are indeed closures. 
     The test was found on Eliot Miranda's Cog Blog. *)

  public class ClosureTest = TestContext ()(
    public testClosureProperty = (
      | factorial result facs |
    
      facs := Array new: 10.
      facs at: 1 put: 1.
      facs at: 2 put: 2.
      facs at: 3 put: 6.
      facs at: 4 put: 24.
      facs at: 5 put: 120.
      facs at: 6 put: 720.
      facs at: 7 put: 5040.
      facs at: 8 put: 40320.
      facs at: 9 put: 362880.
      facs at: 10 put: 3628800.

      factorial := [ :n |
          n = 1
              ifTrue: [ 1 ]
              ifFalse: [ (factorial value: n - 1) * n ] ].

      result := (1 to: 10) collect: factorial.
      result doIndexes: [ :i |
        self assert: (facs at: i) equals: (result at: i) ]
    )
  ) : ( TEST_CONTEXT = () )
  
  public class SelfBlockTest = TestContext ()(

    public testEscapedBlock = (
      self assert: 42 equals: self give42 value
    )

    give42 = (
      ^[ self giveBlock value ]
    )

    giveBlock = (
      ^self returnBlock value
    )

    returnBlock = (
      ^[ self returnBlock2 value ]
    )

    returnBlock2 = (
      ^[ 42 ]
    )
  ) : ( TEST_CONTEXT = () )

  public class BlockTest = TestContext (
    | escapeCount anEscapedBlock |
  ) (

    simpleBlock = (
      ^[42]
    )

    incBlock = (
      ^[ :val | val + 1]
    )

    (* This requires a closure *)
    adderBlock: amount = (
      ^[ :val | amount + val]
    )

    (* Closure with mutable state in block *)
    counterBlock = (
      |count|
      count := 0.
      ^[count := count + 1. count]
    )

    public selfKeeper = (
      ^[self]
    )

    escapingBlock = (
      ^[^42]
    )
    
    public testSimpleBlocks = (
      self assert: 42 equals: self simpleBlock value.
      self assert: 4  equals: (self incBlock value: 3).
      self assert: 43 equals: ((self adderBlock: 13) value: 30).
    )
    
    public testClosure = (
      | counter |
      counter := self counterBlock.
      self assert: 1 equals: counter value.
      self assert: 2 equals: counter value.
      self assert: 1 equals: self counterBlock value. (* make sure each copy is independent *)
      self assert: 3 equals: counter value.
    )
    
    public testSelfInBlock = (
      | testInst |
      testInst := BlockTest new.
      self assert: testInst is: testInst selfKeeper value.
      self assert: self     is: self selfKeeper value.
    )
    
    public testEscapedBlock = (
      | escapingBlock |

      escapeCount := 0.

      escapingBlock := self escapingBlock.
      
      self assert: 0 equals: escapeCount.
      self assert: 666 equals: escapingBlock value.
      self assert: 1 equals: escapeCount.
      
      self assert: escapingBlock is: anEscapedBlock.
    )

    escapedBlock: block = (
      escapeCount := escapeCount + 1.
      anEscapedBlock := block.

      (* return some dummy value to the object that sent 'value' to block *)
      ^666
    )
  ) : ( TEST_CONTEXT = () )
)
